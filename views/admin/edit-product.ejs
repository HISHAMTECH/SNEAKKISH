<%- include("../../views/partials/admin/header") %>
    <title>SNEAKKISH-ADMIN</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
 /* Base Layout Styles */
body {
    font-family: 'Poppins', sans-serif;
    background: url('/images/SHOES/background.jpg') no-repeat center center fixed;
    background-size: cover;
    color: #fff;
    margin: 0;
    padding: 0;
    display: flex;
}

.content-main {
    margin-left: 290px;
    width: calc(100% - 290px);
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
}

.content-header {
    text-align: center;
    margin-bottom: 60px;
    width: 100%;
    max-width: 1200px;
}

.content-title {
    color: #fff;
    font-size: 24px;
    font-weight: bold;
}

.content {
    width: 1200px;
    max-width: 100%;
    margin: 0 auto;
}

/* Card Styles */
.card {
    width: 1200px;
    max-width: 100%;
    background: rgba(0, 0, 0, 0.9);
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
    margin-bottom: 30px;
}

.card-header {
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    padding-bottom: 15px;
    margin-bottom: 20px;
}

.card-header h4 {
    color: #fff;
    margin: 0;
}

/* Form Elements */
.form-label {
    color: #fff;
    font-weight: 500;
    margin-bottom: 8px;
    display: block;
}

.form-control, .form-select {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
    padding: 10px;
    border-radius: 5px;
    width: 100%;
    margin-bottom: 15px;
}

.form-control:focus, .form-select:focus {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
    outline: none;
}

.form-select option {
    background: #333;
    color: #fff;
}

/* Image Gallery */
.image-gallery {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    padding: 20px;
}

.image-container {
    position: relative;
    width: 150px;
}

.image-wrapper {
    position: relative;
    width: 100%;
    height: 150px;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.product-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.delete-icon {
    position: absolute;
    top: 10px;
    right: 10px;
    background-color: rgba(255, 0, 0, 0.8);
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.image-wrapper:hover .delete-icon {
    opacity: 1;
}

/* Preview Container */
#preview-container {
    display: flex;
    gap: 10px;
    margin-top: 10px;
    flex-wrap: wrap;
}

.preview-image {
    width: 150px;
    height: 150px;
    object-fit: cover;
    border-radius: 8px;
    border: 2px solid rgba(255, 255, 255, 0.2);
}

/* Error Messages */
.error-message {
    color: #ff4444;
    font-size: 0.875rem;
    margin-top: 4px;
    margin-bottom: 10px;
    display: none;
}

/* Buttons */
.btn {
    background: #28a745;
    color: white;
    padding: 12px 24px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    transition: 0.3s;
    margin-top: 20px;
}

.btn:hover {
    background: #218838;
}

.btn-primary {
    background: #0d6efd;
}

.btn-primary:hover {
    background: #0b5ed7;
}

/* Responsive Design */
@media (max-width: 1500px) {
    .content, .card {
        width: 1000px;
    }
}

@media (max-width: 1300px) {
    .content, .card {
        width: 800px;
    }
}

@media (max-width: 1100px) {
    .content, .card {
        width: 600px;
    }
}

@media (max-width: 768px) {
    .content-main {
        margin-left: 0;
        width: 100%;
    }
    
    .card {
        width: 95%;
    }
}

.preview-wrapper {
    margin-bottom: 20px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    padding: 15px;
    border-radius: 8px;
}

.cropper-container {
    background-color: #333;
    margin-bottom: 15px;
}

.preview-image {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
    border: 2px solid rgba(255, 255, 255, 0.2);
}

/* Cropper.js custom styles */
.cropper-view-box {
    outline: 2px solid #fff;
    outline-color: rgba(255, 255, 255, 0.75);
}

.cropper-line {
    background-color: rgba(255, 255, 255, 0.5);
}

.cropper-point {
    background-color: #fff;
}
    </style>
</head>
<body>
   

    <div class="content-main">
        <section class="content">
        <div class="content-header">
            
            <h2 class="content-title"> Edit Product</h2>
        </div>

        <div class="card">
            <div class="card-body">
                <form id="productForm" method="post" action="/admin/editProduct/<%=product._id%>" enctype="multipart/form-data">
                    <div class="form-group">
                        <label class="form-label" for="product_name">Product Name</label>
                        <input type="text" name="productName" id="product_name" class="form-control" value="<%=product.ProductName%>" required>
                        <div id="productName-error" class="error-message"></div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="brand">Brand</label>
                        <select name="brand" id="brand" class="form-select" required>
                            <%for(let i=0;i<brand.length;i++){%>
                                <option value="<%=brand[i].BrandName%>" <%=brand[i].BrandName === product.Brand ? 'selected' : ''%>>
                                    <%=brand[i].BrandName%>
                                </option>
                            <%}%>
                        </select>
                        <div id="brand-error" class="error-message"></div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea name="descriptionData" class="form-control" required><%=product.Description%></textarea>
                        <div id="description-error" class="error-message"></div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Regular Price</label>
                        <input type="number" name="regularPrice" class="form-control" value="<%=product.RegularPrice%>" required min="0">
                        <div id="regularPrice-error" class="error-message"></div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Sale Price</label>
                        <input type="number" name="salePrice" class="form-control" value="<%=product.SalePrice%>" required min="0">
                        <div id="salePrice-error" class="error-message"></div>
                    </div>

                  
                    <div class="form-group">
                        <label class="form-label">Colour</label>
                        <input type="text" name="colour" class="form-control" value="<%=product.Colour%>" required>
                        <div id="colour-error" class="error-message"></div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <select name="category" class="form-select" required>
                            <%for(let i=0;i<cat.length;i++){%>
                                <option value="<%=cat[i].Name%>" <%=cat[i].Name === product.Category ? 'selected' : ''%>>
                                    <%=cat[i].Name%>
                                </option>
                            <%}%>
                        </select>
                        <div id="category-error" class="error-message"></div>
                    </div>


                    <div id="variant-container" class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h4 class="mb-0">Product Variants</h4>
                            <button type="button" class="btn btn-primary" onclick="addVariant()">Add Variant</button>
                        </div>
                        <div class="card-body">
                            <% if (product.Variants && product.Variants.length > 0) { %>
                                <% product.Variants.forEach((variant, index) => { %>
                                    <div class="variant mb-4 p-3 border rounded">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h5 class="mb-0">Variant <%= index + 1 %></h5>
                                            <br>
                                        </div>

                                        <div class="row">
                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Size:</label>
                                                <input type="number" name="variants[<%= index %>][size]" 
                                                    class="form-control border" value="<%= variant.Size %>" required>
                                                <div class="error-message"></div>
                                            </div>

                                        

                                            <div class="col-md-6 mb-3">
                                                <label class="form-label">Quantity:</label>
                                                <input type="number" name="variants[<%= index %>][quantity]" 
                                                    class="form-control border" value="<%=variant.Quantity %>" required>
                                                <div class="error-message"></div>
                                            </div>

                                            <% if (index > 0) { %>
                                                <button type="button" class="btn btn-danger btn-sm" onclick="removeVariant(this)">Remove</button>
                                            
                                            <% } %>

                                            <!-- <div class="col-md-6">
                                                <label class="form-label">Status:</label>
                                                <select name="variants[<%= index %>][status]" class="form-select border" required>
                                                    <option value="Available" <%= variant.status === 'Available' ? 'selected' : '' %>>Available</option>
                                                    <option value="out of stock" <%= variant.status === 'out of stock' ? 'selected' : '' %>>Out of Stock</option>
                                                    <option value="Discontinued" <%= variant.status === 'Discontinued' ? 'selected' : '' %>>Discontinued</option>
                                                </select>
                                                <div class="error-message"></div>
                                            </div> -->
                                        </div>
                                    </div>
                                <% }); %>
                            <% } else { %>
                                <div class="variant mb-4 p-3 border rounded">
                                    <h5 class="mb-0">Variant 1</h5>
                                    <div class="row">
                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Size:</label>
                                            <input type="number" name="variants[0][size]" class="form-control border" required>
                                            <div class="error-message"></div>
                                        </div>

                                        <div class="col-md-6 mb-3">
                                            <label class="form-label">Quantity:</label>
                                            <input type="number" name="variants[0][quantity]" class="form-control border" value="1" required>
                                            <div class="error-message"></div>
                                        </div>

                                        <!-- <div class="col-md-6">
                                            <label class="form-label">Status:</label>
                                            <select name="variants[0][status]" class="form-select border" required>
                                                <option value="Available">Available</option>
                                                <option value="out of stock">Out of Stock</option>
                                                <option value="Discontinued">Discontinued</option>
                                            </select>
                                            <div class="error-message"></div>
                                        </div> -->
                                    </div>
                                </div>
                            <% } %>
                        </div>
                        </div>


                    <!-- Current Images Section -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4>Current Images</h4>
                        </div>
                        <div class="image-gallery">
                            <%for(let i=0;i<product.ProductImage.length;i++){%>
                                <div class="image-container">
                                    <div class="image-wrapper">
                                        <img class="product-image" src="/uploads/re-image/<%=product.ProductImage[i]%>" alt="Product Image">
                                        <div class="delete-icon" onclick="confirmDelete('<%=product.ProductImage[i]%>','<%=product._id%>')">
                                            <i class="fas fa-trash"></i>
                                        </div>
                                    </div>
                                </div>
                            <%}%>
                        </div>
                    </div>

                    <!-- New Image Upload Section -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h4>Add New Images</h4>
                        </div>
                        <div class="card-body">
                            <div class="image-upload-container">
                                <input type="file" name="images" id="imageInput" accept="image/*" multiple class="form-control">
                                <div id="preview-container"></div>
                                <div id="image-error" class="error-message"></div>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary" onclick="return validateForm()">
                        Update Product
                    </button>
                </form>
            </div>
        </div>
    </section>
</div>
<script></script>

    <script>
 document.addEventListener('DOMContentLoaded', () => {
    // Load Cropper.js dynamically if not already loaded
    if (typeof Cropper === 'undefined') {
        const cropperScript = document.createElement('script');
        cropperScript.src = 'https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js';
        document.head.appendChild(cropperScript);
    }

    const existingImages = document.querySelectorAll('.image-container');
    totalImageCount = existingImages.length;
});

let totalImageCount = 0;
let croppers = [];

// Handle image input change
document.getElementById('imageInput').addEventListener('change', function(e) {
    const files = e.target.files;
    const newImageCount = files.length;
    const potentialTotalImages = totalImageCount + newImageCount;

    // Clear previous previews and croppers
    const previewContainer = document.getElementById('preview-container');
    previewContainer.innerHTML = '';
    croppers.forEach(cropper => cropper.destroy());
    croppers = [];
    
    // Validation checks
    if (potentialTotalImages < 3) {
        Swal.fire({
            icon: 'error',
            title: 'Not Enough Images',
            text: `Please select at least ${3 - totalImageCount} more images. Minimum requirement is 3 images.`
        });
        this.value = '';
        return;
    }

    if (potentialTotalImages > 4) {
        Swal.fire({
            icon: 'error',
            title: 'Too Many Images',
            text: `You can only upload a maximum of ${4 - totalImageCount} more images. Maximum limit is 4 images.`
        });
        this.value = '';
        return;
    }

    // Process each selected file
    Array.from(files).forEach((file, index) => {
        if (!file.type.startsWith('image/')) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid File Type',
                text: 'Please upload only image files.'
            });
            return;
        }

        createImageCropperUI(file, index, previewContainer);
    });
});

// Create UI for image cropping
function createImageCropperUI(file, index, container) {
    // Create wrapper container
    const previewWrapper = document.createElement('div');
    previewWrapper.className = 'preview-wrapper';
    previewWrapper.style.padding = '15px';
    previewWrapper.style.marginBottom = '20px';
    previewWrapper.style.border = '1px solid rgba(255, 255, 255, 0.2)';
    previewWrapper.style.borderRadius = '8px';
    
    // Image container for cropper
    const imageContainer = document.createElement('div');
    imageContainer.className = 'image-crop-container';
    imageContainer.style.maxWidth = '100%';
    imageContainer.style.height = '400px';
    imageContainer.style.backgroundColor = '#333';
    imageContainer.style.marginBottom = '15px';
    
    // Create the image element for cropping
    const img = document.createElement('img');
    img.className = 'crop-image';
    img.id = `cropImage${index}`;
    img.style.display = 'block';
    img.style.maxWidth = '100%';
    
    // Buttons container
    const buttonsContainer = document.createElement('div');
    buttonsContainer.className = 'buttons-container';
    buttonsContainer.style.display = 'flex';
    buttonsContainer.style.gap = '10px';
    buttonsContainer.style.marginTop = '10px';
    
    // Crop button
    const cropButton = document.createElement('button');
    cropButton.type = 'button';
    cropButton.className = 'btn btn-primary';
    cropButton.textContent = 'Crop Image';
    
    // Reset button
    const resetButton = document.createElement('button');
    resetButton.type = 'button';
    resetButton.className = 'btn btn-secondary';
    resetButton.textContent = 'Reset';
    resetButton.style.display = 'none';
    
    // Preview image
    const previewImage = document.createElement('img');
    previewImage.className = 'preview-image';
    previewImage.id = `previewImage${index}`;
    previewImage.style.display = 'none';
    previewImage.style.maxWidth = '100%';
    previewImage.style.height = 'auto';
    previewImage.style.borderRadius = '8px';
    previewImage.style.border = '2px solid rgba(255, 255, 255, 0.2)';
    
    // Hidden input to store cropped image data
    const hiddenInput = document.createElement('input');
    hiddenInput.type = 'hidden';
    hiddenInput.name = `croppedImage${index}`;
    hiddenInput.id = `croppedImage${index}`;
    
    // File name display
    const fileNameDisplay = document.createElement('p');
    fileNameDisplay.textContent = `File: ${file.name}`;
    fileNameDisplay.style.color = '#fff';
    fileNameDisplay.style.marginBottom = '10px';
    
    // Assemble the UI
    imageContainer.appendChild(img);
    buttonsContainer.appendChild(cropButton);
    buttonsContainer.appendChild(resetButton);
    
    previewWrapper.appendChild(fileNameDisplay);
    previewWrapper.appendChild(imageContainer);
    previewWrapper.appendChild(buttonsContainer);
    previewWrapper.appendChild(previewImage);
    previewWrapper.appendChild(hiddenInput);
    
    container.appendChild(previewWrapper);
    
    // Load the image and initialize cropper
    const reader = new FileReader();
    reader.onload = function(event) {
        img.src = event.target.result;
        
        // Initialize Cropper after image is loaded
        img.onload = function() {
            const cropper = new Cropper(img, {
                aspectRatio: 1,
                viewMode: 1,
                dragMode: 'move',
                autoCropArea: 0.8,
                restore: false,
                guides: true,
                center: true,
                highlight: false,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: false
            });
            
            croppers[index] = cropper;
            
            // Handle crop button click
            cropButton.addEventListener('click', () => {
                const croppedCanvas = cropper.getCroppedCanvas({
                    width: 800,
                    height: 800
                });
                
                // Get the cropped image as base64 string
                const croppedImageData = croppedCanvas.toDataURL(file.type);
                
                // Store the cropped image data
                document.getElementById(`croppedImage${index}`).value = croppedImageData;
                
                // Display preview
                previewImage.src = croppedImageData;
                previewImage.style.display = 'block';
                previewImage.dataset.cropped = 'true';
                
                // Hide cropper and show reset button
                imageContainer.style.display = 'none';
                cropButton.style.display = 'none';
                resetButton.style.display = 'inline-block';
                
                // Convert cropped image to file
                croppedCanvas.toBlob((blob) => {
                    // Create a new file from the blob
                    const croppedFile = new File([blob], file.name, {
                        type: file.type,
                        lastModified: Date.now()
                    });
                    
                    // Replace the original file in the input
                    const dataTransfer = new DataTransfer();
                    const inputFiles = document.getElementById('imageInput').files;
                    
                    for (let i = 0; i < inputFiles.length; i++) {
                        if (i === index) {
                            dataTransfer.items.add(croppedFile);
                        } else {
                            dataTransfer.items.add(inputFiles[i]);
                        }
                    }
                    
                    document.getElementById('imageInput').files = dataTransfer.files;
                });
            });
            
            // Handle reset button click
            resetButton.addEventListener('click', () => {
                // Clear cropped image data
                document.getElementById(`croppedImage${index}`).value = '';
                
                // Destroy existing cropper instance
                cropper.destroy();
                
                // Reset image source
                img.src = event.target.result;
                
                // Initialize new cropper
                setTimeout(() => {
                    const newCropper = new Cropper(img, {
                        aspectRatio: 1,
                        viewMode: 1,
                        dragMode: 'move',
                        autoCropArea: 0.8,
                        restore: false,
                        guides: true,
                        center: true,
                        highlight: false,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        toggleDragModeOnDblclick: false
                    });
                    
                    croppers[index] = newCropper;
                    
                    // Update UI
                    previewImage.style.display = 'none';
                    previewImage.dataset.cropped = 'false';
                    imageContainer.style.display = 'block';
                    cropButton.style.display = 'inline-block';
                    resetButton.style.display = 'none';
                }, 100);
            });
        };
    };
    reader.readAsDataURL(file);
}

// Form validation
function validateForm() {
    let isValid = true;
    clearErrorMessages();

    // Product Name validation
    const productName = document.getElementById('product_name').value;
    if (!productName.trim()) {
        showError('productName-error', 'Product name is required');
        isValid = false;
    }

    // Description validation
    const description = document.getElementsByName('descriptionData')[0].value;
    if (!description.trim()) {
        showError('description-error', 'Description is required');
        isValid = false;
    }

    // Price validations
    const regularPrice = document.getElementsByName('regularPrice')[0].value;
    const salePrice = document.getElementsByName('salePrice')[0].value;

    if (!regularPrice || regularPrice <= 0) {
        showError('regularPrice-error', 'Please enter a valid regular price');
        isValid = false;
    }

    if (!salePrice || salePrice <= 0) {
        showError('salePrice-error', 'Please enter a valid sale price');
        isValid = false;
    }

    if (parseFloat(salePrice) >= parseFloat(regularPrice)) {
        showError('salePrice-error', 'Sale price must be less than regular price');
        isValid = false;
    }

    // Color validation
    const colour = document.getElementsByName('colour')[0].value;
    if (!colour.trim()) {
        showError('colour-error', 'Color is required');
        isValid = false;
    }

    // Variants validation
    const variantContainers = document.querySelectorAll('.variant');
    if (variantContainers.length === 0) {
        Swal.fire({
            icon: 'error',
            title: 'No Variants',
            text: 'Please add at least one product variant'
        });
        isValid = false;
    } else {
        variantContainers.forEach((container, index) => {
            const sizeInput = container.querySelector(`input[name^="variants["][name$="[size]"]`);
            const quantityInput = container.querySelector(`input[name^="variants["][name$="[quantity]"]`);
            
            if (!sizeInput || !sizeInput.value || parseInt(sizeInput.value) <= 0) {
                if (sizeInput) {
                    sizeInput.classList.add('is-invalid');
                    const errorDiv = sizeInput.nextElementSibling;
                    if (errorDiv && errorDiv.classList.contains('error-message')) {
                        errorDiv.textContent = 'Size is required and must be greater than 0';
                        errorDiv.style.display = 'block';
                    }
                }
                isValid = false;
            }
            
            if (!quantityInput || !quantityInput.value || parseInt(quantityInput.value) < 0) {
                if (quantityInput) {
                    quantityInput.classList.add('is-invalid');
                    const errorDiv = quantityInput.nextElementSibling;
                    if (errorDiv && errorDiv.classList.contains('error-message')) {
                        errorDiv.textContent = 'Quantity is required and must be at least 0';
                        errorDiv.style.display = 'block';
                    }
                }
                isValid = false;
            }
        });
    }

    // Image validation
    const newImages = document.getElementById('imageInput').files;
    
    // Only check for new images if there aren't enough existing images
    if (totalImageCount < 3 && (!newImages || newImages.length === 0)) {
        showError('image-error', 'Please upload at least 3 images for the product');
        isValid = false;
    }

    // Check if any images need cropping
    if (newImages && newImages.length > 0) {
        let uncropped = false;
        document.querySelectorAll('.preview-image').forEach((img, i) => {
            if (img.dataset.cropped !== 'true') {
                uncropped = true;
            }
        });

        if (uncropped) {
            showError('image-error', 'Please crop all uploaded images before submitting');
            isValid = false;
        }
    }

    if (!isValid) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            text: 'Please check all fields and try again.'
        });
        return false;
    }

    // Show loading indicator during form submission
    Swal.fire({
        title: 'Updating Product',
        text: 'Please wait...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    return true;
}

// Helper functions
function showError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.textContent = '';
        element.style.display = 'none';
    });
    
    // Remove is-invalid class from all inputs
    document.querySelectorAll('.is-invalid').forEach(input => {
        input.classList.remove('is-invalid');
    });
}

// Image deletion with confirmation
function confirmDelete(imageId, productId) {
    // Check if deletion would result in less than minimum required images
    if (totalImageCount <= 3) {
        Swal.fire({
            icon: 'error',
            title: 'Cannot Delete Image',
            text: 'Minimum 3 images are required for the product.'
        });
        return;
    }

    Swal.fire({
        title: 'Delete Image?',
        text: "This action cannot be undone",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            deleteImage(imageId, productId);
        }
    });
}

// Image deletion AJAX call
function deleteImage(imageId, productId) {
    $.ajax({
        url: "/admin/deleteImage",
        method: "POST",
        data: {
            imageNameToServer: imageId,
            productIdToServer: productId
        },
        success: function(response) {
            if (response.status) {
                totalImageCount--; // Decrease image count
                Swal.fire({
                    title: 'Deleted!',
                    text: 'Image has been deleted.',
                    icon: 'success',
                    timer: 1500
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: response.message || 'Failed to delete image.',
                    icon: 'error'
                });
            }
        },
        error: function(xhr) {
            Swal.fire({
                title: 'Error!',
                text: xhr.responseJSON?.message || 'Failed to delete image.',
                icon: 'error'
            });
        }
    });
}

// Variant management functions
function addVariant() {
    const variantContainer = document.getElementById('variant-container').getElementsByClassName('card-body')[0];
    const variants = variantContainer.getElementsByClassName('variant');
    const newIndex = variants.length;

    const newVariant = document.createElement('div');
    newVariant.className = 'variant mb-4 p-3 border rounded';
    newVariant.innerHTML = `
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">Variant ${newIndex + 1}</h5>
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <label class="form-label">Size:</label>
                <input type="number" name="variants[${newIndex}][size]" class="form-control border" required>
                <div class="error-message"></div>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label">Quantity:</label>
                <input type="number" name="variants[${newIndex}][quantity]" class="form-control border" value="1" required>
                <div class="error-message"></div>
            </div>
            <button type="button" class="btn btn-danger btn-sm" onclick="removeVariant(this)">Remove</button>
        </div>
    `;

    variantContainer.appendChild(newVariant);
}

function removeVariant(button) {
    const variant = button.closest('.variant');
    variant.remove();

    // Reindex remaining variants
    const variantContainer = document.getElementById('variant-container').getElementsByClassName('card-body')[0];
    const variants = variantContainer.getElementsByClassName('variant');
    
    Array.from(variants).forEach((v, index) => {
        // Update heading
        const heading = v.querySelector('h5');
        if (heading) {
            heading.textContent = `Variant ${index + 1}`;
        }
        
        // Update input names
        v.querySelectorAll('input, select').forEach(input => {
            const name = input.getAttribute('name');
            if (name) {
                const newName = name.replace(/variants\[\d+\]/, `variants[${index}]`);
                input.setAttribute('name', newName);
            }
        });
    });
}

</script>
<%- include("../../views/partials/admin/footer") %>
